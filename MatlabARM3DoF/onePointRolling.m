function [dx, Ff_m, Fn_m] = onePointRolling(~,x,u,params)


g = params.g; %wo = params.wo; lo = params.lo;
s1 = params.s1; lm = params.lm; wm = params.wm;
lc = params.lc;
thc = params.objAngle;
% error = xDes - x(5:end);
% u = K*error;
dx = zeros(size(x));
if(x(1)^2 + x(3)^2 > 0.4^2)
    disp('Arm limit exceeded');
end
dx(1) = x(2); %xmd
dx(2) = u(1); %xmdd
dx(3) = x(4); %ymd
dx(4) = u(2); %ymdd
dx(5) = x(6); %thmd
dx(6) = u(3); %thmdd
dx(7) = x(8); %xod
% dx(8) = (-3*g*sin(x(11) + atan(wo/lo) - pi/2)*(wo*cos(x(11)) + ...
%       lo*sin(x(11))) + (lc*(lm - s1)*cos(x(5)) + ...
%       3*(-lm*lo + lo*s1 + wm*wo)*cos(x(5) - x(11))*sin(...
%         x(11) + atan(wo/lo) - pi/2) + lc*wm*sin(x(5)) - ...
%       3*(lo*wm + lm*wo - s1*wo)*sin(...
%         x(11) + atan(wo/lo) - pi/2)*sin(...
%         x(5) - x(11)))*x(6)^2 + (-lc*lo*cos(x(11)) + ...
%       3*(lo^2 + wo^2)*sin(x(11) + atan(wo/lo) - pi/2) + ...
%       lc*wo*sin(x(11)))*x(12)^2 + ...
%    lc*(-(wm*cos(x(5)) + (-lm + s1)*sin(x(5)))*u(3) + u(1)) + ...
%    3*sin(x(11) + ...
%       atan(wo/lo) - pi/ ...
%        2)*(((lo*wm + lm*wo - s1*wo)*cos(...
%            x(5) - x(11)) + (-lm*lo + lo*s1 + wm*wo)*sin(...
%            x(5) - x(11)))*u(3) + (-lo*cos(x(11)) + ...
%          wo*sin(x(11)))*u(1) - (wo*cos(x(11)) + lo*sin(x(11)))*u(2)))/(lc + ...
%    3*wo*cos(x(11) + atan(wo/lo) - pi/2 - x(11)) - ...
%    3*lo*sin(x(11) + atan(wo/lo) - pi/2 - x(11))); %xodd
%Redone
dx(8) = (((lm - s1)*(7*cos(x(5)) + 6*cos(x(5) - 2*(thc + x(11)))) + ...
        wm*(7*sin(x(5)) + 6*sin(x(5) - 2*(thc + x(11)))))* ...
      x(6)^2 - ...
     13*lc*cos(thc + x(11))*x(12)^2 - ...
     (7*wm*cos(x(5)) + 6*wm*cos(x(5) - 2*(thc + x(11))) - ...
        (lm - s1)*(7*sin(x(5)) + 6*sin(x(5) - 2*(thc + x(11)))))* ...
      u(3) + (7 + 6*cos(2*(thc + x(11))))* ...
      u(1) + 6*sin(2*(thc + x(11)))* ...
      (g + u(2)))/13;
dx(9) = x(10); %yod
% dx(10) = (3*g*sin(x(11) + atan(wo/lo) - pi/2)*(lo*cos(x(11)) - ...
%       wo*sin(x(11))) + (-lc*wm*cos(x(5)) + lc*(lm - s1)*sin(x(5)) + ...
%       3*cos(x(11) + atan(wo/lo) - pi/2)*cos(...
%         x(11))*((lm*lo - lo*s1 - wm*wo)*cos(...
%            x(5)) + (lo*wm + lm*wo - s1*wo)*sin(x(5))) - ...
%       3*cos(x(11) + ...
%          atan(wo/lo) - pi/...
%           2)*((lo*wm + lm*wo - s1*wo)*cos(...
%            x(5)) + (-lm*lo + lo*s1 + wm*wo)*sin(x(5)))*sin(...
%         x(11)))*x(6)^2 - (3*(lo^2 + wo^2)*cos(...
%         x(11) + atan(wo/lo) - pi/2) + lc*wo*cos(x(11)) + ...
%       lc*lo*sin(x(11)))*x(12)^2 + ...
%    lc*(-((lm - s1)*cos(x(5)) + wm*sin(x(5)))*u(3) + u(2)) + ...
%    3*cos(x(11) + atan(wo/lo) - pi/2)*sin(...
%      x(11))*(((-lm*lo + lo*s1 + wm*wo)*cos(...
%            x(5)) - (lo*wm + lm*wo - s1*wo)*sin(x(5)))*u(3) - wo*u(1) + ...
%       lo*u(2)) + ...
%    3*cos(x(11) + atan(wo/lo) - pi/2)*cos(...
%      x(11))*((-(lo*wm + lm*wo - s1*wo)*cos(...
%            x(5)) + (lm*lo - lo*s1 - wm*wo)*sin(x(5)))*u(3) + lo*u(1) + ...
%       wo*u(2)))/(lc + 3*wo*cos(x(11) + atan(wo/lo) - pi/2 - x(11)) - ...
%    3*lo*sin(x(11) + atan(wo/lo) - pi/2 - x(11))); %yodd
%Redone
dx(10) = (-12*g*(cos(thc + x(11)))^2 + ...
     (-7*wm*cos(x(5)) + 6*wm*cos(x(5) - 2*(thc + x(11))) + ...
        (lm - s1)*(7*sin(x(5)) - 6*sin(x(5) - 2*(thc + x(11)))))* ...
      x(6)^2 - ...
     13*lc*sin(thc + x(11))*x(12)^2 + ...
     (-((lm - s1)*(7*cos(x(5)) - 6*cos(x(5) - 2*(thc + x(11))))) - ...
        7*wm*sin(x(5)) + 6*wm*sin(x(5) - 2*(thc + x(11))))* ...
      u(3) + 6*sin(2*(thc + x(11)))* ...
      u(1) + (7 - 6*cos(2*(thc + x(11))))* ...
      u(2))/13;
dx(11) = x(12); %thod
% dx(12) = -(3*(((-lm + s1)*cos(x(11) + atan(wo/lo) - pi/2 - x(5)) + ...
%          wm*sin(x(11) + atan(wo/lo) - pi/2 - ...
%             x(5)))*x(6)^2 + (lo*cos( ...
%            x(11) + atan(wo/lo) - pi/2 - x(11)) + ...
%          wo*sin(x(11) + atan(wo/lo) - pi/2 - ...
%             x(11)))*x(12)^2 + (wm*cos( ...
%            x(11) + atan(wo/lo) - pi/2 - x(5)) + (lm - s1)*sin( ...
%            x(11) + atan(wo/lo) - pi/2 - x(5)))*u(3) - ...
%       cos(x(11) + atan(wo/lo) - pi/2)*u(1) - ...
%       sin(x(11) + atan(wo/lo) - pi/2)*(g + u(2))))/(lc + ...
%    3*wo*cos(x(11) + atan(wo/lo) - pi/2 - x(11)) - ...
%    3*lo*sin(x(11) + atan(wo/lo) - pi/2 - x(11))); %thodd
%Redone dynamics? maybe not any different
dx(12) = (-12*(-((wm*cos(thc - x(5) + x(11)) + ...
            (lm - s1)*sin(thc - x(5) + x(11)))* ...
          x(6)^2) + ...
       ((-lm + s1)*cos(thc - x(5) + x(11)) + ...
          wm*sin(thc - x(5) + x(11)))*u(3) - ...
       sin(thc + x(11))*u(1) + ...
       cos(thc + x(11))*(g + u(2))))/(13.*lc);

Ff_m = dx(8)*cos(x(5)) + (g + dx(10))*sin(x(5));
Fn_m = (g+dx(10))*cos(x(5)) - dx(8)*sin(x(5));

if(abs(Ff_m) > Fn_m)
    disp('Friction cone exceeded');
end
if(Fn_m < 0)
    disp('contact broken');
end

end